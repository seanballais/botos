"""
Django settings for botos project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys


def get_env_var(var_name, env_source=os.environ, value_meanings=None,
                debug=False, debug_value=None):
    # We use this function to get environment variables in order for this
    # settings module to be testable.
    if debug:
        return debug_value

    # Create a sentence that shows the supported values.
    if value_meanings:
        valid_values = list(value_meanings.keys())

        supported_values_str = None
        if len(valid_values) == 1:
            supported_values_str = valid_values[0]
        else:
            supported_values_str = '{}, and {}'.format(
                ', '.join(valid_values[:len(value_meanings) - 1]),
                valid_values[len(valid_values) - 1]
            )

        supported_values_sentence = 'The supported {}:\n    {}'.format(
            'value is' if len(valid_values) == 1 else 'values are',
            supported_values_str
        )

    # Check if var_name is available.
    try:
        env_value = env_source[var_name]
    except KeyError:
        error_message = (
            'Environment variable, {}, does not exist. '
            'Make sure that the variable exists.{}'
        ).format(
            var_name,
            ' {}'.format(supported_values_sentence) if value_meanings else ''
        )

        sys.exit(error_message)
    
    # Usually, we get a string when obtaining values from environment
    # variables. However, sometimes the strings need to be converted to a value
    # that can be easily used by the program. So, we map the string to a
    # dictionary of values, if present. If the string is not in the dictionary,
    # we raise an exception.
    if value_meanings:
        try:
            env_value = value_meanings[env_value]
        except KeyError:
            error_message = (
                'Environment variable, {}, was given an unsupported value.{}'
            ).format(
                var_name,
                ' {}'.format(supported_values_sentence) if value_meanings \
                                                        else ''
            )

            sys.exit(error_message)

    return env_value

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)

# The debug flag should be turned on when in development. Only disable it in
# staging/production.
DEBUG = get_env_var(
    'BOTOS_DEBUG',
    value_meanings={ "True": True, "1": True, "False": False, "0": False }
)

# Secret key.
SECRET_KEY = get_env_var(
    'BOTOS_SECRET_KEY', debug=DEBUG,
    debug_value='T6xtu*&k8@)pibt(^c2ox%@#3taw0zp_g05e28g!#0j3gjrf2!RAVIS'
)

# Database setup
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': get_env_var('BOTOS_DATABASE_HOST'),
        'PORT': get_env_var('BOTOS_DATABASE_PORT'),
        'NAME': get_env_var('BOTOS_DATABASE_NAME'),
        'USER': get_env_var('BOTOS_DATABASE_USERNAME'),
        'PASSWORD': get_env_var('BOTOS_DATABASE_PASSWORD'),
        'TEST': {
            'NAME': get_env_var('BOTOS_TEST_DATABASE_NAME')
        }
    }
}

# Set up default auto-field.
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Static and media roots setup
STATIC_ROOT = get_env_var('BOTOS_STATIC_ROOT', debug=DEBUG, debug_value=None)
MEDIA_ROOT = get_env_var('BOTOS_MEDIA_ROOT',
                         debug=DEBUG,
                         debug_value=os.path.join(BASE_DIR, 'botos/media/'))

# Allowed hosts setup
ALLOWED_HOSTS = list(
    map(
        lambda s: s.strip(),
        get_env_var(
            'BOTOS_ALLOWED_HOSTS', debug=DEBUG,
            debug_value='127.0.0.1, localhost'
        ).split(',')
    )
)

# Application definitions
INSTALLED_APPS = [
    'core',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'dal',
    'dal_select2',
    'django.contrib.admin'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'botos.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, 'botos/templates') ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.get_template'
            ],
        },
    },
]

WSGI_APPLICATION = 'botos.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'

# Additional directories for collectstatic to look in.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'botos/templates/'),
]

# Media URL. Primarily the directory and URL for the user-uploaded files.
MEDIA_URL = '/media/'

# Set custom user model.
AUTH_USER_MODEL = 'core.User'

# Set up login-specific information.
LOGIN_REQUIRED_URL = '/'
LOGIN_URL = '/'
